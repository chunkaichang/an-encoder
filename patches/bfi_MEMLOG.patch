diff --git a/bfi.cpp b/bfi.cpp
--- a/bfi.cpp
+++ b/bfi.cpp
@@ -256,6 +256,31 @@
 	fprintf(stdout, "name of target at address 0x%lX: %s\n", target, name.c_str());
 }
 #endif /* DISASM */
+#ifdef MEMLOG
+static VOID
+memaccess(THREADID id, CONTEXT* ctx, ADDRINT ip, ADDRINT addr, UINT32 size, UINT32 access)
+{
+	std::string kind;
+	switch(access) {
+	case 0: kind = "NONE"; break;
+	case 1: kind = "READ"; break;
+	case 2: kind = "WRITE"; break;
+	case 3: kind = "READ|WRITE"; break;
+	default: 
+        assert (0 && "invalid memory access kind");
+	}
+
+	uint64_t value = 0;
+	unsigned bytes = size < sizeof(uint64_t) ? size : sizeof(uint64_t);
+	memcpy(&value, (void*)addr, bytes);
+	
+	fprintf(stdout, "memory access (%s) (ip=0x%lX) -- addr=0x%lX, size=%d, value=0x%lX\n",
+			kind.c_str(), ip, addr, size, value);
+	memcpy(&value, (void*)0x602040, 8);
+	//fprintf(stdout, "memory at address 0x602040, size=8, value=0x%lX\n",
+	//		value);
+}
+#endif /* MEMLOG */
 
 /* ----------------------------------------------------------------------------
  * count and find functions
@@ -533,6 +558,26 @@
                        IARG_END);
     }
 #endif /* DISASM */
+#ifdef MEMLOG
+	if (INS_IsMemoryRead(ins) || INS_IsMemoryWrite(ins)) {
+		for (unsigned i = 0; i < INS_MemoryOperandCount(ins); i++) {
+			USIZE size = INS_MemoryOperandSize(ins, i);
+        	// determine whether and how operand op is accessed
+	        // 0 = NONE, 1 = READ, 2 = WRITE, 3 = READ|WRITE)
+    	    UINT32 access =
+        	    (INS_MemoryOperandIsRead(ins, i) ? 1 : 0) |
+            	(INS_MemoryOperandIsWritten(ins, i) ? 2 : 0);
+			INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR) memaccess,
+             	           IARG_THREAD_ID,
+                	       IARG_CONTEXT,
+                   		   IARG_ADDRINT, INS_Address(ins),
+                  		   IARG_MEMORYOP_EA, i,
+	                       IARG_UINT32, size,
+						   IARG_UINT32, access,
+                  	   	   IARG_END);
+		}
+	}
+#endif /* MEMLOG */
 
     // count instructions
     INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR) count_instr,
